============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.5, py-1.10.0, pluggy-1.0.0 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 356 items

http_tests/admin_tests/test_admin_user_remove.py::test_once_removed_user_cant_do_anything FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_messages_after_user_removal_correct_format PASSED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removed_profile_still_fetchable_with_user_profile PASSED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_email_reusable PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_handle_reusable PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner PASSED [  3%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token FAILED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_cannot_demote_last_owner PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token FAILED [  5%]
http_tests/auth_tests/test_auth_login.py::test_successful_login PASSED   [  5%]
http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions FAILED [  5%]
http_tests/auth_tests/test_auth_login.py::test_unregistered_user PASSED  [  5%]
http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_successful_logout FAILED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_accesserror_when_already_logged_out FAILED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[@gmail.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[bob] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[bob@bob@bob.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_password[12345] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_password[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_first[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_first[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_last[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_last[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_email PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_removed_user_name PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_successful_registration PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_basic_handle_generated_correctly[Bob-Smith-bobsmith] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_basic_handle_generated_correctly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abc-def0-abcdef0-abc-def-abcdef1] FAILED [ 11%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member PASSED [ 12%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_member_can_addowner FAILED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_cant_addowner_when_non_member PASSED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner PASSED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_private PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_public PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_u_id PASSED [ 15%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id PASSED [ 15%]
http_tests/channel_tests/test_channel_addowner.py::test_invalid_token FAILED [ 15%]
http_tests/channel_tests/test_channel_details.py::test_member_successful PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_invalid_token FAILED [ 16%]
http_tests/channel_tests/test_channel_invite.py::test_duplicate_invite PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_member PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid PASSED [ 18%]
http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid PASSED [ 18%]
http_tests/channel_tests/test_channel_invite.py::test_invalidated_token FAILED [ 18%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_global_member_join_public PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_global_member_cant_join_private PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_already_joined_channel PASSED [ 20%]
http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id PASSED [ 20%]
http_tests/channel_tests/test_channel_join.py::test_invalidated_token FAILED [ 20%]
http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully PASSED [ 21%]
http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member PASSED [ 21%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id PASSED [ 21%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_token FAILED [ 21%]
http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent FAILED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent FAILED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given FAILED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_member_can_remove_owner FAILED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_nonmember_cannot_remove_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_cannot_remove_only_owner FAILED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalid_u_id PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token FAILED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[True-] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[False-] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalidated_token FAILED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy] PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy] PASSED [ 31%]
http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel PASSED [ 31%]
http_tests/channels_tests/test_channels_list.py::test_invalidated_token FAILED [ 31%]
http_tests/channels_tests/test_channels_listall.py::test_when_no_channels PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_invalidated_token FAILED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation FAILED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single FAILED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple FAILED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_users PASSED   [ 34%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_users_but_one_invalid PASSED [ 34%]
http_tests/dm_tests/test_dm_create.py::test_invalid_token FAILED         [ 34%]
http_tests/dm_tests/test_dm_details.py::test_member_successful FAILED    [ 35%]
http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful PASSED [ 35%]
http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id PASSED        [ 35%]
http_tests/dm_tests/test_dm_details.py::test_invalid_token FAILED        [ 35%]
http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully FAILED [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_leave_dm_when_not_member PASSED [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id PASSED          [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_token FAILED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms PASSED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm FAILED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms FAILED    [ 37%]
http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm PASSED     [ 38%]
http_tests/dm_tests/test_dm_list.py::test_invalidated_token FAILED       [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent FAILED [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent FAILED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected FAILED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected FAILED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member PASSED [ 40%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid PASSED [ 40%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given FAILED [ 40%]
http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal PASSED [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm PASSED [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id PASSED         [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_token FAILED         [ 42%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_channel PASSED [ 42%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_dm FAILED [ 42%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_channel FAILED [ 42%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_dm FAILED [ 43%]
http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message_channel FAILED [ 43%]
http_tests/message_tests/test_message_edit.py::test_global_owner_cant_edit_members_message_dm FAILED [ 43%]
http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_invalid_message_length PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_invalid_token FAILED [ 45%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique FAILED [ 45%]
http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message FAILED [ 51%]
http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message_channel FAILED [ 51%]
http_tests/message_tests/test_message_remove.py::test_global_owner_cant_remove_members_message_dm FAILED [ 51%]
http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message PASSED [ 51%]
http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message PASSED [ 52%]
http_tests/message_tests/test_message_remove.py::test_invalid_token FAILED [ 52%]
http_tests/message_tests/test_message_send.py::test_valid_message PASSED [ 52%]
http_tests/message_tests/test_message_send.py::test_nonmember_post PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_channel PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_message[] PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_token FAILED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_valid_message FAILED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_nonmember_post PASSED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_invalid_dm PASSED  [ 55%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message[] PASSED [ 55%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 55%]
http_tests/message_tests/test_message_senddm.py::test_invalid_token FAILED [ 55%]
http_tests/other_tests/test_clear.py::test_clear_works PASSED            [ 67%]
http_tests/other_tests/test_users_all.py::test_successful_users_all PASSED [ 74%]
http_tests/other_tests/test_users_all.py::test_invalid_token FAILED      [ 75%]
http_tests/user_tests/test_user_profile.py::test_user_profile_valid PASSED [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_user PASSED     [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_token FAILED    [ 90%]
http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[] PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob] PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token FAILED [ 92%]
http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[] PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[new handle] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[newh@ndle] PASSED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token FAILED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name PASSED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_token FAILED [ 97%]

====== Marks recorded: 63.79 ======


=================================== FAILURES ===================================
___________________ test_once_removed_user_cant_do_anything ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...1NiJ9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_once_removed_user_cant_do_anything(user_woody, user_zerg, woodys_public_toybox, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        with pytest.raises(AccessError):
>           auth_logout(user_zerg.token, ctx)

http_tests/admin_tests/test_admin_user_remove.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_________________________ test_removal_removed_from_dm _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_removal_removed_from_dm(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        admin_user_remove(user_woody.token, user_buzz.u_id, ctx)
    
>       members = dm_details(user_woody.token, woody_and_buzz_dm.dm_id, ctx)['members']

http_tests/admin_tests/test_admin_user_remove.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:15: in dm_details
    token=token, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/admin_tests/test_admin_user_remove.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/admin_tests/test_admin_userpermission_change.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
__________________________ test_can_have_two_sessions __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.overrideMarks(2)
    def test_can_have_two_sessions(user_woody, ctx):
        session2 = auth_login(user_woody.email, user_woody.password, ctx)
    
        # succeeds
        assert user_profile(session2['token'], user_woody.u_id, ctx) == user_profile(user_woody.token, user_woody.u_id, ctx)
    
>       assert auth_logout(session2['token'], ctx) == {}

http_tests/auth_tests/test_auth_login.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_successful_logout ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_successful_logout(user_woody, ctx):
>       assert auth_logout(user_woody.token, ctx) is not None

http_tests/auth_tests/test_auth_logout.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
___________________ test_accesserror_when_already_logged_out ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_accesserror_when_already_logged_out(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/auth_tests/test_auth_logout.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_ test_duplicate_handles_generated_correctly[abc-def0-abcdef0-abc-def-abcdef1] _

first1 = 'abc', last1 = 'def0', handle1 = 'abcdef0', first2 = 'abc'
last2 = 'def', handle2 = 'abcdef1'
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def test_duplicate_handles_generated_correctly(first1, last1, handle1, first2, last2, handle2, woodys_public_toybox, user_woody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        auth_register('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = auth_register(email1, 'password1', first1, last1, ctx)
        assert handle1 == user_profile(user1['token'], user1['auth_user_id'], ctx)['user']['handle_str']
    
        user2 = auth_register(email2, 'password1', first2, last2, ctx)
>       assert handle2 == user_profile(user2['token'], user2['auth_user_id'], ctx)['user']['handle_str']
E       AssertionError: assert 'abcdef1' == 'abcdef0'
E         - abcdef0
E         ?       ^
E         + abcdef1
E         ?       ^

http_tests/auth_tests/test_auth_register.py:99: AssertionError
____________________ test_global_owner_member_can_addowner _____________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_global_owner_member_can_addowner(user_buzz, woodys_public_toybox, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       channel_addowner(user_buzz.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_addowner.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_details.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_invite.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_join.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_leave.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
________________________ test_under_fifty_messages_sent ________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_under_fifty_messages_sent(woodys_public_toybox, user_woody, ctx):
        message_ids = [
            message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)['message_id'] for x in
            range(10)
        ]
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
    
        assert ch_msgs['start'] == 0
        assert ch_msgs['end'] == -1
>       assert message_ids[::-1] == [m['message_id'] for m in ch_msgs['messages']]
E       assert [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
E         At index 0 diff: 10 != 1
E         Full diff:
E         - [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
E         + [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

http_tests/channel_tests/test_channel_messages.py:25: AssertionError
________________________ test_over_fifty_messages_sent _________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_over_fifty_messages_sent(woodys_public_toybox, user_woody, ctx):
        message_ids = [
            message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)['message_id'] for x in
            range(51)
        ]
        message_ids.reverse()
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        assert ch_msgs['start'] == 0
        assert ch_msgs['end'] == 50
>       assert message_ids[0: 50] == [m['message_id'] for m in ch_msgs['messages']]
E       assert [51,\n 50,\n 49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2] == [1,\n 2,\n 3,\n 4,\n 5,\n 6,\n 7,\n 8,\n 9,\n 10,\n 11,\n 12,\n 13,\n 14,\n 15,\n 16,\n 17,\n 18,\n 19,\n 20,\n 21,\n 22,\n 23,\n 24,\n 25,\n 26,\n 27,\n 28,\n 29,\n 30,\n 31,\n 32,\n 33,\n 34,\n 35,\n 36,\n 37,\n 38,\n 39,\n 40,\n 41,\n 42,\n 43,\n 44,\n 45,\n 46,\n 47,\n 48,\n 49,\n 50]
E         At index 0 diff: 51 != 1
E         Full diff:
E           [
E         -  1,
E         +  51,
E         ?  +
E         +  50,
E         +  49,
E         +  48,
E         +  47,
E         +  46,
E         +  45,
E         +  44,
E         +  43,
E         +  42,
E         +  41,
E         +  40,
E         +  39,
E         +  38,
E         +  37,
E         +  36,
E         +  35,
E         +  34,
E         +  33,
E         +  32,
E         +  31,
E         +  30,
E         +  29,
E         +  28,
E         +  27,
E         +  26,
E         +  25,
E         +  24,
E         +  23,
E         +  22,
E         +  21,
E         +  20,
E         +  19,
E         +  18,
E         +  17,
E         +  16,
E         +  15,
E         +  14,
E         +  13,
E         +  12,
E         +  11,
E         +  10,
E         +  9,
E         +  8,
E         +  7,
E         +  6,
E         +  5,
E         +  4,
E         +  3,
E            2,
E         -  3,
E         -  4,
E         -  5,
E         -  6,
E         -  7,
E         -  8,
E         -  9,
E         -  10,
E         -  11,
E         -  12,
E         -  13,
E         -  14,
E         -  15,
E         -  16,
E         -  17,
E         -  18,
E         -  19,
E         -  20,
E         -  21,
E         -  22,
E         -  23,
E         -  24,
E         -  25,
E         -  26,
E         -  27,
E         -  28,
E         -  29,
E         -  30,
E         -  31,
E         -  32,
E         -  33,
E         -  34,
E         -  35,
E         -  36,
E         -  37,
E         -  38,
E         -  39,
E         -  40,
E         -  41,
E         -  42,
E         -  43,
E         -  44,
E         -  45,
E         -  46,
E         -  47,
E         -  48,
E         -  49,
E         -  50,
E           ]

http_tests/channel_tests/test_channel_messages.py:38: AssertionError
__________________ test_access_error_when_invalid_token_given __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_access_error_when_invalid_token_given(user_woody, woodys_public_toybox, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_messages.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
__________________ test_global_owner_member_can_remove_owner ___________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...1NiJ9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=3, to....eyJhdXRoX3VzZXJfaWQiOjMsInNlc3Npb25faWQiOjF9.9zkoZ8JVN33Wcc6Z1Tl4wdBI5YHwy9EwCoq2ak4l85k', handle_str='buzzlightyear')
ctx = None

    def test_global_owner_member_can_remove_owner(user_zerg, user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_zerg.u_id, ctx)
    
        channel_addowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
>       channel_removeowner(user_zerg.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
__________________ test_global_owner_cannot_remove_only_owner __________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_global_owner_cannot_remove_only_owner(user_buzz, user_woody, woodys_public_toybox, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
        with pytest.raises(InputError):
>           channel_removeowner(user_buzz.token, woodys_public_toybox.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_removeowner.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channels_tests/test_channels_create.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channels_tests/test_channels_list.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channels_tests/test_channels_listall.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_________________________ test_successful_dm_creation __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
ctx = None

    def test_successful_dm_creation(user_woody, user_buzz, ctx):
        a_dm = dm_create(user_woody.token, [user_buzz.u_id], ctx)
    
        woodys_dms = dm_list(user_woody.token, ctx)
        buzzs_dms = dm_list(user_buzz.token, ctx)
    
>       assert woodys_dms['dms'][0]['dm_id'] == a_dm['dm_id']
E       IndexError: list index out of range

http_tests/dm_tests/test_dm_create.py:20: IndexError
_________________________ test_dm_name_creation_single _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_dm_name_creation_single(user_woody, ctx):
>       the_dm = dm_create(user_woody.token, [], ctx)

http_tests/dm_tests/test_dm_create.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:37: in dm_create
    token=token, u_ids=u_ids
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
________________________ test_dm_name_creation_multiple ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
ctx = None

    def test_dm_name_creation_multiple(user_woody, user_buzz, ctx):
        the_dm = dm_create(user_woody.token, [user_buzz.u_id], ctx)
>       dm_deets = dm_details(user_woody.token, the_dm['dm_id'], ctx)

http_tests/dm_tests/test_dm_create.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:15: in dm_details
    token=token, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_create.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_member_successful ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_member_successful(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        dm_deets = dm_details(user_buzz.token, woody_and_buzz_dm.dm_id, ctx)
    
>       assert dm_deets['name'] == woody_and_buzz_dm.name
E       AssertionError: assert 'buzzlightyear' == ''
E         + buzzlightyear

http_tests/dm_tests/test_dm_details.py:17: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_details.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________ test_member_leave_dm_successfully _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_member_leave_dm_successfully(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        dm_leave(user_buzz.token, woody_and_buzz_dm.dm_id, ctx)
    
        buzzs_dms = dm_list(user_buzz.token, ctx)
>       dm_deets = dm_details(user_woody.token, woody_and_buzz_dm.dm_id, ctx)

http_tests/dm_tests/test_dm_leave.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:15: in dm_details
    token=token, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_leave.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_____________________________ test_when_in_one_dm ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_when_in_one_dm(user_woody, woody_and_buzz_dm, ctx):
        dms = dm_list(user_woody.token, ctx)
    
>       assert dms == {'dms': [{'name': woody_and_buzz_dm.name, 'dm_id': woody_and_buzz_dm.dm_id}]}
E       AssertionError: assert {'dms': []} == {'dms': [{'dm_id': 1, 'name': ''}]}
E         Differing items:
E         {'dms': []} != {'dms': [{'dm_id': 1, 'name': ''}]}
E         Full diff:
E         - {'dms': [{'dm_id': 1, 'name': ''}]}
E         + {'dms': []}

http_tests/dm_tests/test_dm_list.py:21: AssertionError
__________________________ test_when_in_multiple_dms ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
dm_factory = <function dm_factory.<locals>.make_dm at 0x7f97300af1e0>
ctx = None

    def test_when_in_multiple_dms(user_woody, dm_factory, ctx):
>       dm_1 = dm_factory(user_woody, [])

http_tests/dm_tests/test_dm_list.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:118: in make_dm
    the_dm = dm.dm_create(creator.token, [m.u_id for m in members], ctx)
http_tests/fakepi/dm.py:37: in dm_create
    token=token, u_ids=u_ids
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_list.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
________________________ test_under_fifty_messages_sent ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_under_fifty_messages_sent(user_woody, woody_and_buzz_dm, ctx):
        message_ids = [
            message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
>           range(10)
        ]

http_tests/dm_tests/test_dm_messages.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/dm_tests/test_dm_messages.py:17: in <listcomp>
    message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
________________________ test_over_fifty_messages_sent _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_over_fifty_messages_sent(user_woody, woody_and_buzz_dm, ctx):
        message_ids = [
            message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
>           range(51)
        ]

http_tests/dm_tests/test_dm_messages.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/dm_tests/test_dm_messages.py:30: in <listcomp>
    message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
________________________ test_removal_by_edit_reflected ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_removal_by_edit_reflected(user_woody, woody_and_buzz_dm, ctx):
>       msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy maybe?', ctx)['message_id']

http_tests/dm_tests/test_dm_messages.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________ test_removal_by_deletion_reflected ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_removal_by_deletion_reflected(user_woody, woody_and_buzz_dm, ctx):
>       msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy maybe?', ctx)['message_id']

http_tests/dm_tests/test_dm_messages.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
__________________ test_access_error_when_invalid_token_given __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_access_error_when_invalid_token_given(user_woody, woody_and_buzz_dm, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_messages.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_remove.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
___________________ test_original_poster_can_edit_message_dm ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f9730182f28>
ctx = None

    def test_original_poster_can_edit_message_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       a_msg = message_factory(user_woody, woody_and_buzz_dm)

http_tests/message_tests/test_message_edit.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:104: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
_________________ test_owner_can_edit_members_message_channel __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f9730097840>
ctx = None

    def test_owner_can_edit_members_message_channel(user_woody, woodys_public_toybox, user_buzz, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
        buzzs_msg = message_factory(user_buzz, woodys_public_toybox)
    
>       message_edit(user_woody.token, buzzs_msg.message_id, 'hi', ctx)

http_tests/message_tests/test_message_edit.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
____________________ test_owner_can_edit_members_message_dm ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1)
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f9730027d90>
ctx = None

    def test_owner_can_edit_members_message_dm(user_woody, woody_and_buzz_dm, user_buzz, message_factory, ctx):
        buzzs_msg = message_factory(user_buzz, woody_and_buzz_dm)
    
>       message_edit(user_woody.token, buzzs_msg.message_id, 'hi', ctx)

http_tests/message_tests/test_message_edit.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________ test_global_owner_can_edit_members_message_channel ______________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...1NiJ9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f972ffc9b70>
ctx = None

    def test_global_owner_can_edit_members_message_channel(user_zerg, user_woody, woodys_public_toybox, message_factory, ctx):
        woodys_msg = message_factory(user_woody, woodys_public_toybox)
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
>       message_edit(user_zerg.token, woodys_msg.message_id, 'hi', ctx)

http_tests/message_tests/test_message_edit.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
________________ test_global_owner_cant_edit_members_message_dm ________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[1], name='', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f97301b9c80>
ctx = None

    def test_global_owner_cant_edit_members_message_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
>       woodys_msg = message_factory(user_woody, woody_and_buzz_dm)

http_tests/message_tests/test_message_edit.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:104: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f972ffc57b8>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       auth_logout(user_woody.token, ctx)

http_tests/message_tests/test_message_edit.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
___________________________ test_message_ids_unique ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...1NiJ9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[3], name='', dm_id=1)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    @pytest.mark.marks(0.5)
    def test_message_ids_unique(user_woody, user_zerg, woody_and_buzz_dm, zergs_private_lair, ctx):
        msg1 = message_send(user_zerg.token, zergs_private_lair.channel_id, 'hi', ctx)
    
        # cross
>       msg2 = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'hi again', ctx)

http_tests/message_tests/test_message_meta.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
____________________ test_owner_can_remove_members_message _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f9730027048>
ctx = None

    def test_owner_can_remove_members_message(user_woody, woodys_public_toybox, user_buzz, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
        buzzs_msg = message_factory(user_buzz, woodys_public_toybox)
    
>       message_remove(user_woody.token, buzzs_msg.message_id, ctx)

http_tests/message_tests/test_message_remove.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:24: in message_remove
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
_____________ test_global_owner_can_remove_members_message_channel _____________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...1NiJ9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f972ffc5950>
ctx = None

    def test_global_owner_can_remove_members_message_channel(user_zerg, user_woody, woodys_public_toybox, message_factory, ctx):
        woodys_msg = message_factory(user_woody, woodys_public_toybox)
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
>       message_remove(user_zerg.token, woodys_msg.message_id, ctx)

http_tests/message_tests/test_message_remove.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:24: in message_remove
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
_______________ test_global_owner_cant_remove_members_message_dm _______________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjF9.CmKKU1QOTFILRQgttNcTxyQvTSoSk9IPikE6zuqHpcs', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[1], name='', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f972ffe7d08>
ctx = None

    def test_global_owner_cant_remove_members_message_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
>       woodys_msg = message_factory(user_woody, woody_and_buzz_dm)

http_tests/message_tests/test_message_remove.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:104: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f972ff6da60>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       auth_logout(user_woody.token, ctx)

http_tests/message_tests/test_message_remove.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/message_tests/test_message_send.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_valid_message ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_valid_message(user_woody, woody_and_buzz_dm, ctx):
        msg_text = 'hello, world'
>       msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, msg_text, ctx)

http_tests/message_tests/test_message_senddm.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='', dm_id=1), ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/message_tests/test_message_senddm.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/other_tests/test_users_all.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/user_tests/test_user_profile.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/user_tests/test_user_profile_setemail.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/user_tests/test_user_profile_sethandle.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.ZuPX6mvuAoch7cV4NH0CPyWE_X0_RWIvkb13ffzMQVo', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/user_tests/test_user_profile_setname.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
=========================== short test summary info ============================
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_once_removed_user_cant_do_anything
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token
FAILED http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions
FAILED http_tests/auth_tests/test_auth_logout.py::test_successful_logout - Ex...
FAILED http_tests/auth_tests/test_auth_logout.py::test_accesserror_when_already_logged_out
FAILED http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abc-def0-abcdef0-abc-def-abcdef1]
FAILED http_tests/channel_tests/test_channel_addowner.py::test_global_owner_member_can_addowner
FAILED http_tests/channel_tests/test_channel_addowner.py::test_invalid_token
FAILED http_tests/channel_tests/test_channel_details.py::test_invalid_token
FAILED http_tests/channel_tests/test_channel_invite.py::test_invalidated_token
FAILED http_tests/channel_tests/test_channel_join.py::test_invalidated_token
FAILED http_tests/channel_tests/test_channel_leave.py::test_invalid_token - E...
FAILED http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent
FAILED http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent
FAILED http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_member_can_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_cannot_remove_only_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_create.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_list.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_listall.py::test_invalidated_token
FAILED http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation - I...
FAILED http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single - ...
FAILED http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple
FAILED http_tests/dm_tests/test_dm_create.py::test_invalid_token - Exception:...
FAILED http_tests/dm_tests/test_dm_details.py::test_member_successful - Asser...
FAILED http_tests/dm_tests/test_dm_details.py::test_invalid_token - Exception...
FAILED http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully
FAILED http_tests/dm_tests/test_dm_leave.py::test_invalid_token - Exception: ...
FAILED http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm - AssertionEr...
FAILED http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms - http_...
FAILED http_tests/dm_tests/test_dm_list.py::test_invalidated_token - Exceptio...
FAILED http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent
FAILED http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent
FAILED http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected
FAILED http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected
FAILED http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given
FAILED http_tests/dm_tests/test_dm_remove.py::test_invalid_token - Exception:...
FAILED http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_dm
FAILED http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_channel
FAILED http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_dm
FAILED http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message_channel
FAILED http_tests/message_tests/test_message_edit.py::test_global_owner_cant_edit_members_message_dm
FAILED http_tests/message_tests/test_message_edit.py::test_invalid_token - Ex...
FAILED http_tests/message_tests/test_message_meta.py::test_message_ids_unique
FAILED http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message
FAILED http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message_channel
FAILED http_tests/message_tests/test_message_remove.py::test_global_owner_cant_remove_members_message_dm
FAILED http_tests/message_tests/test_message_remove.py::test_invalid_token - ...
FAILED http_tests/message_tests/test_message_send.py::test_invalid_token - Ex...
FAILED http_tests/message_tests/test_message_senddm.py::test_valid_message - ...
FAILED http_tests/message_tests/test_message_senddm.py::test_invalid_token - ...
FAILED http_tests/other_tests/test_users_all.py::test_invalid_token - Excepti...
FAILED http_tests/user_tests/test_user_profile.py::test_invalid_token - Excep...
FAILED http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_setname.py::test_invalid_token
================= 59 failed, 147 passed, 150 skipped in 10.09s =================
